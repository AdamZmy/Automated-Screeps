const roleWorker = {
  run: function (creep) {
    // Check if the worker is currently working and has no energy left
    if (creep.memory.working && creep.store[RESOURCE_ENERGY] === 0) {
      // Set the worker to not working and make it say "ðŸ”„ harvest"
      creep.memory.working = false;
      creep.say('ðŸ”„ harvest');
    }
    // Check if the worker is not currently working and has full energy capacity
    if (!creep.memory.working && creep.store.getFreeCapacity() === 0) {
      // Set the worker to working and make it say "ðŸš§ build" or "âš¡ upgrade" or "ðŸ”§ repair"
      creep.memory.working = true;
      let targets = creep.room.find(FIND_MY_CONSTRUCTION_SITES);
      let numBuilders = _.sum(Game.creeps, (c) => c.memory.role === 'worker' && c.memory.task === 'build');
      let numUpgraders = _.sum(Game.creeps, (c) => c.memory.role === 'worker' && c.memory.task === 'upgrade');
      let numRepairers = _.sum(Game.creeps, (c) => c.memory.role === 'worker' && c.memory.task === 'repair');
      if (numBuilders < 2) {
        creep.memory.task = 'build';
        creep.say('ðŸš§ build');
      } else if (numBuilders >= 2 && numUpgraders < 2) {
        creep.memory.task = 'upgrade';
        creep.say('âš¡ upgrade');
      } else {
        creep.memory.task = 'repair';
        creep.say('ðŸ”§ repair');
      }
    }

    // If the worker is currently working
    if (creep.memory.working) {
      // Check the worker's current task
      switch (creep.memory.task) {
        case 'build':
          // Find all the construction sites in the room
          let targets = creep.room.find(FIND_MY_CONSTRUCTION_SITES);
          // If there are any construction sites
          if (targets.length) {
            // Build the first construction site in the list
            if (creep.build(targets[0]) === ERR_NOT_IN_RANGE) {
              // If the construction site is too far away, move towards it
              creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
            }
          }
          break;
        case 'upgrade':
          // Upgrade the controller of the current room
          if (creep.upgradeController(creep.room.controller) === ERR_NOT_IN_RANGE) {
            // If the controller is too far away, move towards it
            creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});
          }
          break;
        case 'repair':
          // Find all structures that need repair
          let damagedStructures = creep.room.find(FIND_STRUCTURES, {
            filter: (structure) => structure.hits < structure.hitsMax
          });
          // If there are any structures that need repair
          if (damagedStructures.length > 0) {
            // Repair the first structure in the list
            if (creep.repair(damagedStructures[0]) === ERR_NOT_IN_RANGE) {
              // If the structure is too far away, move towards it
              creep.moveTo(damagedStructures[0], {visualizePathStyle: {stroke: '#ffffff'}});
            }
          }
          break;
      }
    }

    // If the worker is not currently working, move to the closest energy source and collect energy
    else {
      let target = creep.pos.findClosestByRange(FIND_SOURCES_ACTIVE);
      if (creep.harvest(target) === ERR_NOT_IN_RANGE) {
        creep.moveTo(target, {visualizePathStyle: {stroke: '#ffaa00'}});
      }
    }
  }
};

module.exports = roleWorker;
