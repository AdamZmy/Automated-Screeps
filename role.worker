var observation = require('observation');

const roleWorker = {
  run: function (creep) {

    // Check the worker's current task
    if (!creep.memory.task) {
      let numBuilders = _.sum(Game.creeps, (c) => c.memory.role === 'worker' && c.memory.task === 'build');
      let numUpgraders = _.sum(Game.creeps, (c) => c.memory.role === 'worker' && c.memory.task === 'upgrade');
      let numRepairers = _.sum(Game.creeps, (c) => c.memory.role === 'worker' && c.memory.task === 'repair');
      if (numBuilders < 3) {
        creep.memory.task = 'build';
        creep.say('🚧 build');
      } else if (numBuilders >= 3 && numUpgraders < 2) {
        creep.memory.task = 'upgrade';
        creep.say('⚡ upgrade');
      } else {
        creep.memory.task = 'repair';
        creep.say('🔧 repair');
      }
    }

    // 检查observation中的warning状态
    if (observation.warning) {
        creep.say('Warning! Pausing construction');
        return;
    }

    // Check if the worker is currently working and has no energy left
    if (creep.memory.working && creep.store[RESOURCE_ENERGY] === 0) {
      // Set the worker to not working and make it say "🔄 harvest"
      creep.memory.working = false;
      creep.say('🔄 harvest');
    }
    // Check if the worker is not currently working and has full energy capacity
    if (!creep.memory.working && creep.store.getFreeCapacity() === 0) {
      // Set the worker to working and make it say "🚧 build" or "⚡ upgrade" or "🔧 repair"
      creep.memory.working = true;
    }

    // If the worker is currently working
    if (creep.memory.working) {
      // Check the worker's current task
      switch (creep.memory.task) {
        case 'build':
            // Find all the construction sites in the room
            var targets = creep.room.find(FIND_CONSTRUCTION_SITES);
            // If there are any construction sites
            if (targets.length) {
                // Build the first construction site in the list
                if (creep.build(targets[0]) == ERR_NOT_IN_RANGE) {
                    // If the construction site is too far away, move towards it
                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
                }
            } else {
                // If there are no construction sites, go to upgrade the controller
                if (creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {
                    // If the controller is too far away, move towards it
                    creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});
                }
            }
          break;
        case 'upgrade':
          // Upgrade the controller of the current room
          if (creep.upgradeController(creep.room.controller) === ERR_NOT_IN_RANGE) {
            // If the controller is too far away, move towards it
            creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});
          }
          break;
        case 'repair':
          // Find all structures that need repair
          let damagedStructures = creep.room.find(FIND_STRUCTURES, {
            filter: (structure) => structure.hits < structure.hitsMax
          });
          // If there are any structures that need repair
          if (damagedStructures.length > 0) {
            // Repair the first structure in the list
            if (creep.repair(damagedStructures[0]) === ERR_NOT_IN_RANGE) {
              // If the structure is too far away, move towards it
              creep.moveTo(damagedStructures[0], {visualizePathStyle: {stroke: '#ffffff'}});
            }
          } else {
                    // If there are no construction sites, go to upgrade the controller
                    if (creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {
                    // If the controller is too far away, move towards it
                    creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});
                }
          }
          break;
      }
    }

    // If the worker is not currently working, move to the closest energy source and collect energy
    else {
            // Find the closest spawn, extension or container with energy
            var target = creep.pos.findClosestByRange(FIND_MY_STRUCTURES, {
                filter: (structure) => {
                    return (structure.structureType == STRUCTURE_SPAWN || structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_CONTAINER) &&
                        structure.store[RESOURCE_ENERGY] > 0;
                }
            });
            
            if (target) {
                // Withdraw energy from the closest spawn, extension or container with energy
                if (creep.withdraw(target, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    // If the spawn, extension or container is too far away, move towards it
                    creep.moveTo(target, {visualizePathStyle: {stroke: '#ffffff'}});
                }
            }
    }
  }
};

module.exports = roleWorker;
