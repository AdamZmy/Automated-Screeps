const roleCarrier = {
    run: function (creep) {
        // Check if the creep is carrying energy
        if (creep.memory.carrying && creep.store[RESOURCE_ENERGY] === 0) {
            creep.memory.carrying = false;
            creep.say('ðŸ”„ collecting');
        }
        // Check if the creep is full of energy
        if (!creep.memory.carrying && creep.store.getFreeCapacity() === 0) {
            creep.memory.carrying = true;
            creep.say('âš¡ storing');
        }

        // If the creep is full, move to the spawn or extension and transfer it
        if (creep.memory.carrying) {
            let target = creep.pos.findClosestByPath(FIND_STRUCTURES, {
                filter: (structure) =>
                    (structure.structureType === STRUCTURE_SPAWN || structure.structureType === STRUCTURE_EXTENSION) &&
                    structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0
            });
            if (target) {
                if (creep.transfer(target, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {
                    creep.moveTo(target);
                }
            }
        }
        // If the creep is not full, move to the energy source and collect it
        else {
          // check if there are any dropped resources with more than carrier capacity
          const droppedResources = creep.room.find(FIND_DROPPED_RESOURCES, {
            filter: (resource) => {
              return resource.amount > creep.store.getFreeCapacity();
            }
          });
    
          // if there are, go collect the closest one
          if (droppedResources.length > 0) {
            const closestResource = creep.pos.findClosestByRange(droppedResources);
            if (creep.pickup(closestResource) === ERR_NOT_IN_RANGE) {
              creep.moveTo(closestResource, {visualizePathStyle: {stroke: '#ffffff'}});
            }
          } else { // otherwise, collect the largest dropped energy
            const largestResource = creep.pos.findClosestByRange(FIND_DROPPED_RESOURCES, {
              filter: (resource) => {
                return resource.resourceType === RESOURCE_ENERGY;
              },
              orderBy: ['amount']
            });
            if (creep.pickup(largestResource) === ERR_NOT_IN_RANGE) {
              creep.moveTo(largestResource, {visualizePathStyle: {stroke: '#ffffff'}});
            }
          }
        }
    },
};

module.exports = roleCarrier;
