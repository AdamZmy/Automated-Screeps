const roleCarrier = {
  run: function (creep) {
    // Ê£ÄÊü• creep ÊòØÂê¶Êê∫Â∏¶ËÉΩÈáè
    if (creep.memory.carrying && creep.store[RESOURCE_ENERGY] === 0) {
      creep.memory.carrying = false;
      creep.say('üîÑ Êî∂ÈõÜ');
    }
    // Ê£ÄÊü• creep ÊòØÂê¶Êê∫Â∏¶Êª°ËÉΩÈáè
    if (!creep.memory.carrying && creep.store.getFreeCapacity() === 0) {
      creep.memory.carrying = true;
      creep.say('‚ö° Â≠òÂÇ®');
    }

    // Â¶ÇÊûú creep Êê∫Â∏¶Êª°‰∫ÜËÉΩÈáèÔºåÂàôÁßªÂä®Âà∞ÊúÄËøëÁöÑÂ°îÊàñ Spawn/Extension Âπ∂ËΩ¨ÁßªËÉΩÈáè
    if (creep.memory.carrying) {
      // Êü•ÊâæÊúÄËøëÁöÑÂ°îÔºåÂ¶ÇÊûúÊúâÂ°îÈúÄË¶ÅËÉΩÈáèÔºåÂàôÂ∞ÜÂÖ∂ËΩ¨Áßª
      let tower = creep.pos.findClosestByPath(FIND_MY_STRUCTURES, {
        filter: (structure) =>
          structure.structureType === STRUCTURE_TOWER &&
          structure.energy < structure.energyCapacity
      });
      if (tower) {
        if (creep.transfer(tower, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {
          creep.moveTo(tower);
        }
      }
      // Â¶ÇÊûúÊ≤°ÊúâÂ°îÈúÄË¶ÅËÉΩÈáèÔºåÂàôÂ∞ÜÂÖ∂ËΩ¨ÁßªÂà∞ÊúÄËøëÁöÑ Spawn Êàñ Extension
      else {
        let target = creep.pos.findClosestByPath(FIND_MY_STRUCTURES, {
          filter: (structure) =>
            (structure.structureType === STRUCTURE_SPAWN || structure.structureType === STRUCTURE_EXTENSION) &&
            structure.energy < structure.energyCapacity
        });
        if (target) {
          if (creep.transfer(target, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {
            creep.moveTo(target);
          }
        }
      }
    }

    // Â¶ÇÊûú creep Ê≤°ÊúâÊê∫Â∏¶ËÉΩÈáè
    else {
      // <1> Êü•ÊâæÊúÄËøëÁöÑÂ∑≤Êª°ÂÆπÂô®
      let overloadcontainers = creep.room.find(FIND_STRUCTURES, {
        filter: (structure) =>
          structure.structureType === STRUCTURE_CONTAINER &&
          structure.store[RESOURCE_ENERGY] === structure.storeCapacity
      });
      if (overloadcontainers.length > 0) {
        // ‰ªéÊúÄÂ§ßÁöÑÂÆπÂô®‰∏≠ÊèêÂèñËÉΩÈáè
        let closestContainer = creep.pos.findClosestByRange(overloadcontainers);
        if (creep.withdraw(closestContainer, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {
          creep.moveTo(closestContainer);
        }
      } else {
        // <2> Êü•ÊâæÊúÄËøëÁöÑËÉΩÈáèÈáèÂ§ß‰∫éËΩΩÈáçÈáèÁöÑÊéâËêΩËµÑÊ∫ê
        let droppedResources = creep.room.find(FIND_DROPPED_RESOURCES, {
          filter: (resource) => resource.amount > creep.store.getFreeCapacity()
        });
        if (droppedResources.length > 0) {
          let closestResource = creep.pos.findClosestByRange(droppedResources);
          if (creep.pickup(closestResource) === ERR_NOT_IN_RANGE) {
            creep.moveTo(closestResource);
          }
        } else {
          // <3> Êü•ÊâæÊúÄËøëÁöÑÂÆπÂô®ÈáåÁöÑËÉΩÈáèÈáèÂ§ß‰∫éËΩΩÈáçÈáè
          let containers = creep.room.find(FIND_STRUCTURES, {
            filter: (structure) =>
              structure.structureType === STRUCTURE_CONTAINER &&
              structure.store[RESOURCE_ENERGY] > creep.store.getFreeCapacity()
          });
          if (containers.length > 0) {
            let closestContainer = creep.pos.findClosestByRange(containers);
            if (creep.withdraw(closestContainer, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {
              creep.moveTo(closestContainer);
            }
          } else {
            // <4> Êü•ÊâæÂÖ∂‰ªñÊéâËêΩËµÑÊ∫ê
            const energyDrops = creep.room.find(FIND_DROPPED_RESOURCES, {
              filter: (drop) => drop.resourceType === RESOURCE_ENERGY
            });
            const maxEnergyDrop = _.max(energyDrops, (drop) => drop.amount);
            if (maxEnergyDrop) {
              if (creep.pickup(maxEnergyDrop) === ERR_NOT_IN_RANGE) {
                creep.moveTo(maxEnergyDrop);
              }
            }
          }
        }
      }
    }
  }
};

module.exports = roleCarrier;
